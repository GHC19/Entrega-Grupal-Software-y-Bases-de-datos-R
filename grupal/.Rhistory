)
)
# 9. Verificar la estructura jerárquica antes de crear el gráfico
print("Estructura jerárquica:")
print(segundo_partido_municipios_grouped)
# 10. Crear un nodo jerárquico
arbol_datos_municipios <- as.Node(segundo_partido_municipios_grouped)
# 11. Generar el gráfico con un único nodo principal y subdivisiones por elecciones
grafico_municipios <- circlepackeR(
arbol_datos_municipios,
size = "votos_totales",  # Usar los votos totales en lugar de la frecuencia
color_min = "hsl(412,80%,80%)",  # Color mínimo
color_max = "hsl(228,30%,40%)",  # Color máximo
width = 800,
height = 800
)
# 12. Mostrar el gráfico
grafico_municipios
# 13. Verificación: Comparar con los votos totales del PP y el PSOE
votos_pp_psoe <- election_data_final |>
group_by(anno) |>
summarise(
Votos_PP = sum(`PARTIDO POPULAR`, na.rm = TRUE),
Votos_PSOE = sum(`PARTIDO SOCIALISTA OBRERO ESPAÑOL`, na.rm = TRUE)
)
print("Votos totales del PP y el PSOE:")
print(votos_pp_psoe)
# Cargar librerías necesarias
library(tidyverse)
library(data.tree)
library(circlepackeR)
# Supongamos que election_data_final ya está cargado en tu entorno
# 1. Transformar a formato largo
datos_largos <- election_data_final |>
pivot_longer(
cols = 16:ncol(election_data_final),
names_to = "partido",  # Crear una columna con los nombres de los partidos
values_to = "votos"    # Crear una columna con los votos
)
# 2. Crear columna de fecha
datos_largos <- datos_largos |>
mutate(fecha = make_date(year = anno, month = mes, day = 1))  # Asumiendo día 1
# 3. Consolidar votos a nivel de municipio y fecha
datos_agrupados <- datos_largos |>
group_by(tipo_eleccion, fecha, vuelta, codigo_ccaa, codigo_provincia, codigo_municipio, partido) |>
summarise(votos = sum(votos, na.rm = TRUE), .groups = "drop")
# 4. Ordenar por votos y calcular el ranking
resultados_ordenados <- datos_agrupados |>
group_by(tipo_eleccion, fecha, vuelta, codigo_ccaa, codigo_provincia, codigo_municipio) |>
arrange(desc(votos)) |>
mutate(ranking = row_number()) |>
ungroup()
# 5. Filtrar y calcular el segundo partido
segundo_partido_municipios <- resultados_ordenados |>
filter(ranking <= 2) |>
group_by(tipo_eleccion, fecha, vuelta, codigo_ccaa, codigo_provincia, codigo_municipio) |>
mutate(primer_partido = partido[ranking == 1]) |>
filter(primer_partido %in% c("PARTIDO SOCIALISTA OBRERO ESPAÑOL", "PARTIDO POPULAR") & ranking == 2) |>
ungroup()
# 6. Sumar votos totales en lugar de contar municipios
segundo_partido_municipios_grouped <- segundo_partido_municipios |>
group_by(fecha, primer_partido, partido) |>
summarise(votos_totales = sum(votos, na.rm = TRUE), .groups = "drop")
# 7. Verificar duplicaciones (opcional, pero recomendado)
duplicados <- segundo_partido_municipios_grouped |>
group_by(fecha, primer_partido, partido) |>
summarise(n = n(), .groups = "drop") |>
filter(n > 1)
if (nrow(duplicados) > 0) {
print("¡Hay duplicaciones en los datos! Eliminándolas...")
segundo_partido_municipios_grouped <- segundo_partido_municipios_grouped |>
distinct(fecha, primer_partido, partido, .keep_all = TRUE)
}
# 8. Crear estructura jerárquica para el gráfico
segundo_partido_municipios_grouped <- segundo_partido_municipios_grouped |>
mutate(
pathString = paste(
"Resultados",  # Nodo principal
fecha,         # Año de la elección como subnivel
primer_partido,  # Primer partido como subnivel
partido,       # Segundo partido como subnivel
sep = "/"
)
)
# 9. Verificar la estructura jerárquica antes de crear el gráfico
print("Estructura jerárquica:")
print(segundo_partido_municipios_grouped)
# 10. Crear un nodo jerárquico
arbol_datos_municipios <- as.Node(segundo_partido_municipios_grouped)
# 11. Generar el gráfico con un único nodo principal y subdivisiones por elecciones
grafico_municipios <- circlepackeR(
arbol_datos_municipios,
size = "votos_totales",  # Usar los votos totales en lugar de la frecuencia
color_min = "hsl(412,80%,80%)",  # Color mínimo
color_max = "hsl(228,30%,40%)",  # Color máximo
width = 800,
height = 800
)
# 12. Mostrar el gráfico
grafico_municipios
# 13. Verificación: Comparar con los votos totales del PP y el PSOE
votos_pp_psoe <- election_data_final |>
group_by(anno) |>
summarise(
Votos_PP = sum(`PARTIDO POPULAR`, na.rm = TRUE),
Votos_PSOE = sum(`PARTIDO SOCIALISTA OBRERO ESPAÑOL`, na.rm = TRUE)
)
print("Votos totales del PP y el PSOE:")
print(votos_pp_psoe)
# Carga de librerías necesarias
library(tidyverse)
library(lubridate)
library(data.tree)
library(circlepackeR)
# Simulación de un dataset basado en la descripción
# Aquí deberías cargar tu dataset real
election_data_final <- tibble(
tipo_eleccion = c("02", "02", "02", "02"),
anno = c(2008, 2019, 2008, 2019),
mes = c(3, 11, 3, 11),
vuelta = c(1, 1, 1, 1),
codigo_ccaa = c("12", "12", "12", "12"),
codigo_provincia = c("28", "28", "28", "28"),
codigo_municipio = c("001", "001", "002", "002"),
`PARTIDO SOCIALISTA OBRERO ESPAÑOL` = c(1000, 1200, 800, 1000),
`PARTIDO POPULAR` = c(800, 900, 600, 700),
`EH-BILDU` = c(200, 300, 150, 250),
`VOX` = c(100, 200, 50, 150),
OTROS = c(50, 100, 30, 60)
)
# Formato long data
datos_largos <- election_data_final |>
pivot_longer(
cols = 8:ncol(election_data_final),
names_to = "partido", # Crear una columna con los nombres de los partidos
values_to = "votos"    # Crear una columna con los votos
)
# Crear columna de fecha
datos_largos <- datos_largos |>
mutate(fecha = make_date(year = anno, month = mes, day = 1)) # Asumiendo día 1
# Consolidar votos a nivel de municipio y fecha
datos_agrupados <- datos_largos |>
group_by(tipo_eleccion, fecha, vuelta, codigo_ccaa, codigo_provincia, codigo_municipio, partido) |>
summarise(votos = sum(votos, na.rm = TRUE), .groups = "drop")
# Ordenar por votos y calcular el ranking
resultados_ordenados <- datos_agrupados |>
group_by(tipo_eleccion, fecha, vuelta, codigo_ccaa, codigo_provincia, codigo_municipio) |>
arrange(desc(votos)) |>
mutate(ranking = row_number()) |>
ungroup()
# Filtrar y calcular el segundo partido
segundo_partido_municipios <- resultados_ordenados |>
filter(ranking <= 2) |>
group_by(tipo_eleccion, fecha, vuelta, codigo_ccaa, codigo_provincia, codigo_municipio) |>
mutate(primer_partido = partido[ranking == 1]) |>
filter(primer_partido %in% c("PARTIDO SOCIALISTA OBRERO ESPAÑOL", "PARTIDO POPULAR") & ranking == 2) |>
ungroup()
# Contar el número de municipios para cada combinación de primer y segundo partido
segundo_partido_municipios_grouped <- segundo_partido_municipios |>
group_by(fecha, primer_partido, partido) |>
summarise(frecuencia = n_distinct(codigo_municipio), .groups = "drop")
# Crear estructura jerárquica para el gráfico
segundo_partido_municipios_grouped$pathString <- paste(
"Resultados",  # Nodo principal
segundo_partido_municipios_grouped$fecha,  # Año de la elección como subnivel
segundo_partido_municipios_grouped$partido,  # Partidos como subniveles
sep = "/"
)
# Crear un nodo jerárquico
arbol_datos_municipios <- as.Node(segundo_partido_municipios_grouped)
# Generar el gráfico con un único nodo principal y subdivisiones por elecciones
grafico_municipios <- circlepackeR(
arbol_datos_municipios,
size = "frecuencia",
color_min = "hsl(412,80%,80%)",  # Color mínimo
color_max = "hsl(228,30%,40%)",  # Color máximo
width = 800,
height = 800
)
# Mostrar el gráfico
grafico_municipios
# Formato long data
datos_largos <- election_data_final |>
pivot_longer(
cols = 16:ncol(election_data_final),
names_to = "partido", # Crear una columna con los nombres de los partidos
values_to = "votos"    # Crear una columna con los votos
)
# Formato long data
datos_largos <- election_data_final |>
pivot_longer(
cols = 16:ncol(election_data_final),
names_to = "partido", # Crear una columna con los nombres de los partidos
values_to = "votos"    # Crear una columna con los votos
)
# NO TOQUES NADA
#setwd("D:/AA Máster/Gestión BBDD/01. Entrega Grupal")
election_data <- read_csv(file = "datos/datos_elecciones_brutos.csv")
cod_mun <- read_csv(file = "datos/cod_mun.csv")
surveys <- read_csv(file = "datos/historical_surveys.csv")
abbrev <- read_csv(file = "datos/siglas.csv")
#Aquí se fitra el dataset según piden en el PUNTO 10 de items obligatorios.
surveys_filtered <- surveys |>
filter(
date_elec >= as.Date("2008-01-01"),  # Elecciones a partir de 2008
!exit_poll,  # Excluir encuestas a pie de urna
size >= 500,  # Tamaño muestral de al menos 500
as.numeric(field_date_to - field_date_from) > 1  # Más de 1 día de trabajo de campo
)
#Se definen los partido de interés y el resto van a la categoría otros.
partidos_interes <- c("PSOE", "EAJ-PNV", "ERC", "EH-BILDU", "PP", "PODEMOS", "CS", "BNG", "VOX")
col_inicio_partidos <- 11 #Es la primera columna donde aparecen los partidos, las columnas de antes son identificadores fechas y demás.
columnas_otros <- setdiff(names(surveys_filtered)[col_inicio_partidos:ncol(surveys_filtered)], partidos_interes) #setdiff te dice los elementos distintos de los dos datasets que le pases. En este caso estan por un lado los partidos de interes y por otro lado todos, los elementos distintos son los partidos que no coinciden y que van a ir a la categoria otros.
surveys_filtered <- surveys_filtered |>
mutate(
OTROS = rowSums(across(all_of(columnas_otros), ~ replace_na(., 0)), na.rm = TRUE) #Se crea una nueva columna llamada OTROS, que contiene la suma de los valores de todas las columnas que no pertenecen a los partidos de interés.
) |>
select(all_of(partidos_interes), OTROS, everything()) |> select(1:20) #all_of(partidos_interes) selecciona y coloca al principio las columnas correspondientes a los partidos de interés. Luego, se agrega la variable creada OTROS y everything() selecciona todas las demás columnas que no han sido mencionadas, manteniendo su orden original.
#Lo de select(1:20) creo que es redundante.(Pablo)
surveys_filtered
asociaciones <- list(
"PARTIDO SOCIALISTA OBRERO ESPAÑOL" = c(
"PARTIDO SOCIALISTA OBRERO ESPAÑOL",
"PARTIDO SOCIALISTA DE EUSKADI-EUSKADIKO EZKERRA",
"PARTIT DELS SOCIALISTES DE CATALUNYA",
"PARTIDO DOS SOCIALISTAS DE GALICIA-PSOE"
),
"PARTIDO POPULAR" = c(
"PARTIDO POPULAR",
"PARTIT POPULAR/PARTIDO POPULAR",
"PARTIDO POPULAR/PARTIT POPULAR",
"PARTIDO POPULAR - FORO",
"UNION DEL PUEBLO NAVARRO EN COALICION CON EL PARTIDO POPULAR",
"NAVARRA SUMA"  #Considero NA+ como PP
),
"CIUDADANOS" = c(
"CIUDADANOS",
"CIUTADANS-PARTIDO DE LA CIUDADANIA",
"CIUDADANOS-PARTIDO DE LA CIUDADANIA"
),
"PARTIDO NACIONALISTA VASCO" = c(
"EUZKO ALDERDI JELTZALEA-PARTIDO NACIONALISTA VASCO",
"NAFARROA BAI",
"GEROA BAI"
),
"BLOQUE NACIONALISTA GALLEGO" = c(
"BLOQUE NACIONALISTA GALLEGO",
"BNG-NÓS CANDIDATURA GALEGA"
),
"UNIDAS PODEMOS - IU" = c(
"UNIDAS PODEMOS",
"UNIDOS PODEMOS",
"PODEMOS",
"PODEM",
"IZQUIERDA UNIDA-ALTERNATIVA",
"EZKER BATUA-BERDEAK-ALTERNATIVA",
"IZQUIERDA UNIDA",
"ELKARREKIN PODEMOS"
),
"ESQUERRA REPUBLICANA DE CATALUNYA" = c(
"ESQUERRA REPUBLICANA DE CATALUNYA",
"ESQUERRA REPUBLICANA/CATALUNYA SÍ"
),
"EH - BILDU" = c(
"EUSKAL HERRIA BILDU (EH Bildu)",
"EUSKAL HERRIA BILDU",
"EH - BILDU",
"SORTU",
"EUSKO ALKARTASUNA",
"ARALAR",
"ALTERNATIBA"
),
"VOX" = c("VOX")
)
columnas_votos <- colnames(election_data)[16:ncol(election_data)] #Selecciona todas las columnas que contienen el nombre de cada partido y sus valores son el número de votos. 'columnas_votos' será un vector que contiene el nombre de todos los partidos disponibles de este dataset.
columnas_por_partido <- lapply(asociaciones, function(nombres){
intersect(nombres, columnas_votos)
}) #Para cada partido en la lista asociaciones, va recorriendo la lista 'asociaciones' aplicandole la función intersect. La cual recorre ambos vectores y devuelve las coincidencias. Así que el objeto 'columnas_por_partido' será una lista que va a contener los partidos de interés.
columnas_otros <- setdiff(columnas_votos, unlist(columnas_por_partido)) #identifica las columnas que están en columnas_votos pero no en columnas_por_partido
election_data_final <- election_data |>
mutate( #Crea nuevas columnas sumando los votos de las columnas asociadas a cada partido. Luego con rowSums, suma fila a fila los votos correspondientes.
`PARTIDO SOCIALISTA OBRERO ESPAÑOL` = rowSums(across(all_of(columnas_por_partido[["PARTIDO SOCIALISTA OBRERO ESPAÑOL"]])), na.rm = TRUE),
`PARTIDO POPULAR` = rowSums(across(all_of(columnas_por_partido[["PARTIDO POPULAR"]])), na.rm = TRUE),
`CIUDADANOS` = rowSums(across(all_of(columnas_por_partido[["CIUDADANOS"]])), na.rm = TRUE),
`PARTIDO NACIONALISTA VASCO` = rowSums(across(all_of(columnas_por_partido[["PARTIDO NACIONALISTA VASCO"]])), na.rm = TRUE),
`BLOQUE NACIONALISTA GALLEGO` = rowSums(across(all_of(columnas_por_partido[["BLOQUE NACIONALISTA GALLEGO"]])), na.rm = TRUE),
`UNIDAS PODEMOS - IU` = rowSums(across(all_of(columnas_por_partido[["UNIDAS PODEMOS - IU"]])), na.rm = TRUE),
`ESQUERRA REPUBLICANA DE CATALUNYA` = rowSums(across(all_of(columnas_por_partido[["ESQUERRA REPUBLICANA DE CATALUNYA"]])), na.rm = TRUE),
`EH - BILDU` = rowSums(across(all_of(columnas_por_partido[["EH - BILDU"]])), na.rm = TRUE),
`VOX` = rowSums(across(all_of(columnas_por_partido[["VOX"]])), na.rm = TRUE),
OTROS = rowSums(across(all_of(columnas_otros)), na.rm = TRUE)
) |>
select( # Reorganiza las columnas, colocando los partidos principales y OTROS después de las columnas descriptivas.
1:15,
`PARTIDO SOCIALISTA OBRERO ESPAÑOL`,
`PARTIDO POPULAR`,
`CIUDADANOS`,
`PARTIDO NACIONALISTA VASCO`,
`BLOQUE NACIONALISTA GALLEGO`,
`UNIDAS PODEMOS - IU`,
`ESQUERRA REPUBLICANA DE CATALUNYA`,
`EH - BILDU`,
`VOX`,
OTROS
)
election_data_final
# Formato long data
datos_largos <- election_data_final |>
pivot_longer(
cols = 16:ncol(election_data_final),
names_to = "partido", # Crear una columna con los nombres de los partidos
values_to = "votos"    # Crear una columna con los votos
)
# Crear columna de fecha
datos_largos <- datos_largos |>
mutate(fecha = make_date(year = anno, month = mes, day = 1)) # Asumiendo día 1
# Consolidar votos a nivel de municipio y fecha
datos_agrupados <- datos_largos |>
group_by(tipo_eleccion, fecha, vuelta, codigo_ccaa, codigo_provincia, codigo_municipio, partido) |>
summarise(votos = sum(votos, na.rm = TRUE), .groups = "drop")
# Ordenar por votos y calcular el ranking
resultados_ordenados <- datos_agrupados |>
group_by(tipo_eleccion, fecha, vuelta, codigo_ccaa, codigo_provincia, codigo_municipio) |>
arrange(desc(votos)) |>
mutate(ranking = row_number()) |>
ungroup()
# Filtrar y calcular el segundo partido
segundo_partido_municipios <- resultados_ordenados |>
filter(ranking <= 2) |>
group_by(tipo_eleccion, fecha, vuelta, codigo_ccaa, codigo_provincia, codigo_municipio) |>
mutate(primer_partido = partido[ranking == 1]) |>
filter(primer_partido %in% c("PARTIDO SOCIALISTA OBRERO ESPAÑOL", "PARTIDO POPULAR") & ranking == 2) |>
ungroup()
# Contar el número de municipios para cada combinación de primer y segundo partido
segundo_partido_municipios_grouped <- segundo_partido_municipios |>
group_by(fecha, primer_partido, partido) |>
summarise(frecuencia = n_distinct(codigo_municipio), .groups = "drop")
# Crear estructura jerárquica para el gráfico
segundo_partido_municipios_grouped$pathString <- paste(
"Resultados",  # Nodo principal
segundo_partido_municipios_grouped$fecha,  # Año de la elección como subnivel
segundo_partido_municipios_grouped$partido,  # Partidos como subniveles
sep = "/"
)
# Crear un nodo jerárquico
arbol_datos_municipios <- as.Node(segundo_partido_municipios_grouped)
# Generar el gráfico con un único nodo principal y subdivisiones por elecciones
grafico_municipios <- circlepackeR(
arbol_datos_municipios,
size = "frecuencia",
color_min = "hsl(412,80%,80%)",  # Color mínimo
color_max = "hsl(228,30%,40%)",  # Color máximo
width = 800,
height = 800
)
# Mostrar el gráfico
grafico_municipios
# 1. Transformar a formato largo
datos_largos <- election_data_final |>
pivot_longer(
cols = 16:ncol(election_data_final),
names_to = "partido",  # Crear una columna con los nombres de los partidos
values_to = "votos"    # Crear una columna con los votos
)
# 2. Crear columna de fecha
datos_largos <- datos_largos |>
mutate(fecha = make_date(year = anno, month = mes, day = 1))  # Asumiendo día 1
# 3. Consolidar votos a nivel de municipio y fecha
datos_agrupados <- datos_largos |>
group_by(tipo_eleccion, fecha, vuelta, codigo_ccaa, codigo_provincia, codigo_municipio, partido) |>
summarise(votos = sum(votos, na.rm = TRUE), .groups = "drop")
# 4. Revisar votos totales por año para el PP y PSOE
votos_pp_psoe <- election_data_final |>
group_by(anno, mes) |>
summarise(
Votos_PP = sum(`PARTIDO POPULAR`, na.rm = TRUE),
Votos_PSOE = sum(`PARTIDO SOCIALISTA OBRERO ESPAÑOL`, na.rm = TRUE),
.groups = "drop"
)
print("Votos totales del PP y el PSOE por año y mes:")
print(votos_pp_psoe)
# 5. Crear un gráfico de barras para verificar los votos totales por año y mes
library(ggplot2)
grafico_votos <- ggplot(votos_pp_psoe, aes(x = factor(paste(anno, mes, sep = "-")))) +
geom_bar(aes(y = Votos_PP, fill = "PP"), stat = "identity", position = "dodge") +
geom_bar(aes(y = Votos_PSOE, fill = "PSOE"), stat = "identity", position = "dodge") +
scale_fill_manual(values = c("PP" = "blue", "PSOE" = "red")) +
labs(
title = "Votos Totales por Año y Mes",
x = "Año-Mes",
y = "Votos Totales",
fill = "Partido"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(grafico_votos)
# 6. Ordenar por votos y calcular el ranking
resultados_ordenados <- datos_agrupados |>
group_by(tipo_eleccion, fecha, vuelta, codigo_ccaa, codigo_provincia, codigo_municipio) |>
arrange(desc(votos)) |>
mutate(ranking = row_number()) |>
ungroup()
# 7. Filtrar y calcular el segundo partido
segundo_partido_municipios <- resultados_ordenados |>
filter(ranking <= 2) |>
group_by(tipo_eleccion, fecha, vuelta, codigo_ccaa, codigo_provincia, codigo_municipio) |>
mutate(primer_partido = partido[ranking == 1]) |>
filter(primer_partido %in% c("PARTIDO SOCIALISTA OBRERO ESPAÑOL", "PARTIDO POPULAR") & ranking == 2) |>
ungroup()
# 8. Sumar votos totales en lugar de contar municipios
segundo_partido_municipios_grouped <- segundo_partido_municipios |>
group_by(fecha, primer_partido, partido) |>
summarise(votos_totales = sum(votos, na.rm = TRUE), .groups = "drop")
# 9. Crear estructura jerárquica para el gráfico
segundo_partido_municipios_grouped <- segundo_partido_municipios_grouped |>
mutate(
pathString = paste(
"Resultados",  # Nodo principal
fecha,         # Año-Mes de la elección como subnivel
primer_partido,  # Primer partido como subnivel
partido,       # Segundo partido como subnivel
sep = "/"
)
)
# 10. Crear un nodo jerárquico
library(data.tree)
library(circlepackeR)
arbol_datos_municipios <- as.Node(segundo_partido_municipios_grouped)
# 11. Generar el gráfico con un único nodo principal y subdivisiones por elecciones
grafico_municipios <- circlepackeR(
arbol_datos_municipios,
size = "votos_totales",  # Usar los votos totales en lugar de la frecuencia
color_min = "hsl(0,100%,80%)",  # Color mínimo para PSOE (rojo claro)
color_max = "hsl(240,100%,80%)",  # Color máximo para PP (azul claro)
width = 800,
height = 800
)
# 12. Mostrar el gráfico
grafico_municipios
# 1. Transformar a formato largo
datos_largos <- election_data_final |>
pivot_longer(
cols = 16:ncol(election_data_final),
names_to = "partido",  # Crear una columna con los nombres de los partidos
values_to = "votos"    # Crear una columna con los votos
)
# 2. Crear columna de fecha
datos_largos <- datos_largos |>
mutate(fecha = make_date(year = anno, month = mes, day = 1))  # Asumiendo día 1
# 3. Consolidar votos a nivel de elección y partido
datos_agrupados <- datos_largos |>
group_by(fecha, partido) |>
summarise(votos = sum(votos, na.rm = TRUE), .groups = "drop")
# 4. Crear estructura jerárquica para el gráfico
datos_agrupados <- datos_agrupados |>
mutate(
pathString = paste(
"Resultados",  # Nodo principal
fecha,         # Año-Mes como subnivel
partido,       # Partidos como subniveles
sep = "/"
)
)
# 5. Crear un nodo jerárquico
library(data.tree)
library(circlepackeR)
arbol_datos <- as.Node(datos_agrupados)
# 6. Generar el gráfico con un único nodo principal y subdivisiones por elección
grafico <- circlepackeR(
arbol_datos,
size = "votos",  # Usar los votos como métrica para el tamaño del nodo
color_min = "hsl(0,100%,80%)",  # Color mínimo
color_max = "hsl(240,100%,80%)",  # Color máximo
width = 800,
height = 800
)
# 7. Mostrar el gráfico
grafico
# Generar tabla de resultados por elecciones
tabla_resultados <- election_data_final |>
group_by(anno, mes) |>  # Agrupar por año y mes (para incluir elecciones repetidas en el mismo año)
summarise(
Votos_PP = sum(`PARTIDO POPULAR`, na.rm = TRUE),
Votos_PSOE = sum(`PARTIDO SOCIALISTA OBRERO ESPAÑOL`, na.rm = TRUE),
Votos_CIUDADANOS = sum(CIUDADANOS, na.rm = TRUE),
Votos_PNV = sum(`PARTIDO NACIONALISTA VASCO`, na.rm = TRUE),
Votos_BNG = sum(`BLOQUE NACIONALISTA GALLEGO`, na.rm = TRUE),
Votos_PODEMOS = sum(`UNIDAS PODEMOS - IU`, na.rm = TRUE),
Votos_ERC = sum(`ESQUERRA REPUBLICANA DE CATALUNYA`, na.rm = TRUE),
Votos_BILDU = sum(`EH - BILDU`, na.rm = TRUE),
Votos_VOX = sum(VOX, na.rm = TRUE),
Votos_OTROS = sum(OTROS, na.rm = TRUE)
) |>
arrange(anno, mes)  # Ordenar por año y mes
# Ver la tabla en pantalla
print(tabla_resultados)
# Consolidar votos a nivel de elecciones (año y mes)
tabla_resultados <- datos_largos |>
group_by(anno, mes, partido) |>
summarise(votos_totales = sum(votos, na.rm = TRUE), .groups = "drop") |>
arrange(anno, mes, desc(votos_totales)) |>  # Ordenar por año, mes y votos en orden descendente
group_by(anno, mes) |>
slice_head(n = 3) |>  # Seleccionar los tres partidos con más votos en cada elección
mutate(ranking = row_number()) |>  # Añadir ranking: 1 = primer partido, 2 = segundo, etc.
pivot_wider(
names_from = ranking,
values_from = c(partido, votos_totales),
names_glue = "Posicion_{.value}_{ranking}"  # Renombrar columnas
) |>
arrange(anno, mes)  # Ordenar por año y mes
# Ver la tabla en pantalla
print(tabla_resultados)
